Grammar

    0 $accept: program $end

    1 program: CLASS PROGRAM OPEN_CURLY decls CLOSE_CURLY

    2 decls: decls field_decl
    3      | decls method_decl
    4      | %empty

    5 field_decl: type many_field SEMI_COLON

    6 many_field: field
    7           | many_field COMMA field

    8 field: IDENTIFIER
    9      | IDENTIFIER OPEN_SQUARE DECIMAL_LITERAL CLOSE_SQUARE

   10 method_decl: type IDENTIFIER OPEN_PAREN CLOSE_PAREN block
   11            | VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN block
   12            | type IDENTIFIER OPEN_PAREN parameters CLOSE_PAREN block
   13            | VOID IDENTIFIER OPEN_PAREN parameters CLOSE_PAREN block

   14 parameters: type IDENTIFIER
   15           | type IDENTIFIER COMMA parameters

   16 block: OPEN_CURLY var_decls statements CLOSE_CURLY

   17 var_decls: var_decls var_decl
   18          | %empty

   19 var_decl: type many_var SEMI_COLON

   20 many_var: var
   21         | many_var COMMA var

   22 var: IDENTIFIER

   23 type: INT
   24     | BOOLEAN

   25 statements: statements statement
   26           | %empty

   27 statement: location assign_op expr SEMI_COLON
   28          | method_call SEMI_COLON
   29          | IF OPEN_PAREN expr CLOSE_PAREN block ELSE block
   30          | IF OPEN_PAREN expr CLOSE_PAREN block
   31          | FOR IDENTIFIER EQUAL expr COMMA expr block
   32          | RETURN expr SEMI_COLON
   33          | RETURN SEMI_COLON
   34          | BREAK SEMI_COLON
   35          | CONTINUE SEMI_COLON
   36          | block

   37 assign_op: EQUAL
   38          | PLUS_EQUAL
   39          | MINUS_EQUAL

   40 method_call: IDENTIFIER OPEN_PAREN CLOSE_PAREN
   41            | IDENTIFIER OPEN_PAREN many_expr CLOSE_PAREN
   42            | CALLOUT OPEN_PAREN STRING_LITERAL many_callout_arg CLOSE_PAREN

   43 many_callout_arg: %empty
   44                 | many_callout_arg COMMA callout_arg

   45 callout_arg: expr
   46            | STRING_LITERAL

   47 many_expr: expr
   48          | many_expr COMMA expr

   49 location: IDENTIFIER
   50         | IDENTIFIER OPEN_SQUARE CLOSE_SQUARE
   51         | IDENTIFIER OPEN_SQUARE expr CLOSE_SQUARE

   52 expr: location
   53     | method_call
   54     | DECIMAL_LITERAL
   55     | HEX_LITERAL
   56     | CHAR_LITERAL
   57     | bool_literal
   58     | MINUS expr
   59     | EXCLAMATION expr
   60     | OPEN_PAREN expr CLOSE_PAREN
   61     | expr PLUS expr
   62     | expr MINUS expr
   63     | expr MULTIPLY expr
   64     | expr DIVIDE expr
   65     | expr MOD expr
   66     | expr GREATER_THAN expr
   67     | expr LESS_THAN expr
   68     | expr GREATER_THAN_EQUAL expr
   69     | expr LESS_THAN_EQUAL expr
   70     | expr AND expr
   71     | expr OR expr
   72     | expr NOT_EQUAL expr
   73     | expr EQUAL_EQUAL expr

   74 bool_literal: TRUE
   75             | FALSE


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 29 30
ELSE (259) 29
FOR (260) 31
RETURN (261) 32 33
BREAK (262) 34
CONTINUE (263) 35
CALLOUT (264) 42
CLASS (265) 1
PROGRAM (266) 1
TRUE (267) 74
FALSE (268) 75
INT (269) 23
BOOLEAN (270) 24
VOID (271) 11 13
EQUAL (272) 31 37
MINUS_EQUAL (273) 39
PLUS_EQUAL (274) 38
PLUS (275) 61
MINUS (276) 58 62
MULTIPLY (277) 63
DIVIDE (278) 64
MOD (279) 65
LESS_THAN (280) 67
LESS_THAN_EQUAL (281) 69
GREATER_THAN (282) 66
GREATER_THAN_EQUAL (283) 68
EQUAL_EQUAL (284) 73
NOT_EQUAL (285) 72
AND (286) 70
OR (287) 71
OPEN_CURLY (288) 1 16
CLOSE_CURLY (289) 1 16
OPEN_SQUARE (290) 9 50 51
CLOSE_SQUARE (291) 9 50 51
OPEN_PAREN (292) 10 11 12 13 29 30 40 41 42 60
CLOSE_PAREN (293) 10 11 12 13 29 30 40 41 42 60
IDENTIFIER (294) 8 9 10 11 12 13 14 15 22 31 40 41 49 50 51
SEMI_COLON (295) 5 19 27 28 32 33 34 35
COMMA (296) 7 15 21 31 44 48
EXCLAMATION (297) 59
HEX_LITERAL (298) 55
DECIMAL_LITERAL (299) 9 54
STRING_LITERAL (300) 42 46
CHAR_LITERAL (301) 56
UMINUS (302)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0
decls (50)
    on left: 2 3 4, on right: 1 2 3
field_decl (51)
    on left: 5, on right: 2
many_field (52)
    on left: 6 7, on right: 5 7
field (53)
    on left: 8 9, on right: 6 7
method_decl (54)
    on left: 10 11 12 13, on right: 3
parameters (55)
    on left: 14 15, on right: 12 13 15
block (56)
    on left: 16, on right: 10 11 12 13 29 30 31 36
var_decls (57)
    on left: 17 18, on right: 16 17
var_decl (58)
    on left: 19, on right: 17
many_var (59)
    on left: 20 21, on right: 19 21
var (60)
    on left: 22, on right: 20 21
type (61)
    on left: 23 24, on right: 5 10 12 14 15 19
statements (62)
    on left: 25 26, on right: 16 25
statement (63)
    on left: 27 28 29 30 31 32 33 34 35 36, on right: 25
assign_op (64)
    on left: 37 38 39, on right: 27
method_call (65)
    on left: 40 41 42, on right: 28 53
many_callout_arg (66)
    on left: 43 44, on right: 42 44
callout_arg (67)
    on left: 45 46, on right: 44
many_expr (68)
    on left: 47 48, on right: 41 48
location (69)
    on left: 49 50 51, on right: 27 52
expr (70)
    on left: 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
    70 71 72 73, on right: 27 29 30 31 32 45 47 48 51 58 59 60 61 62
    63 64 65 66 67 68 69 70 71 72 73
bool_literal (71)
    on left: 74 75, on right: 57


State 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program  go to state 2


State 1

    1 program: CLASS . PROGRAM OPEN_CURLY decls CLOSE_CURLY

    PROGRAM  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: CLASS PROGRAM . OPEN_CURLY decls CLOSE_CURLY

    OPEN_CURLY  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: CLASS PROGRAM OPEN_CURLY . decls CLOSE_CURLY

    $default  reduce using rule 4 (decls)

    decls  go to state 6


State 6

    1 program: CLASS PROGRAM OPEN_CURLY decls . CLOSE_CURLY
    2 decls: decls . field_decl
    3      | decls . method_decl

    INT          shift, and go to state 7
    BOOLEAN      shift, and go to state 8
    VOID         shift, and go to state 9
    CLOSE_CURLY  shift, and go to state 10

    field_decl   go to state 11
    method_decl  go to state 12
    type         go to state 13


State 7

   23 type: INT .

    $default  reduce using rule 23 (type)


State 8

   24 type: BOOLEAN .

    $default  reduce using rule 24 (type)


State 9

   11 method_decl: VOID . IDENTIFIER OPEN_PAREN CLOSE_PAREN block
   13            | VOID . IDENTIFIER OPEN_PAREN parameters CLOSE_PAREN block

    IDENTIFIER  shift, and go to state 14


State 10

    1 program: CLASS PROGRAM OPEN_CURLY decls CLOSE_CURLY .

    $default  reduce using rule 1 (program)


State 11

    2 decls: decls field_decl .

    $default  reduce using rule 2 (decls)


State 12

    3 decls: decls method_decl .

    $default  reduce using rule 3 (decls)


State 13

    5 field_decl: type . many_field SEMI_COLON
   10 method_decl: type . IDENTIFIER OPEN_PAREN CLOSE_PAREN block
   12            | type . IDENTIFIER OPEN_PAREN parameters CLOSE_PAREN block

    IDENTIFIER  shift, and go to state 15

    many_field  go to state 16
    field       go to state 17


State 14

   11 method_decl: VOID IDENTIFIER . OPEN_PAREN CLOSE_PAREN block
   13            | VOID IDENTIFIER . OPEN_PAREN parameters CLOSE_PAREN block

    OPEN_PAREN  shift, and go to state 18


State 15

    8 field: IDENTIFIER .
    9      | IDENTIFIER . OPEN_SQUARE DECIMAL_LITERAL CLOSE_SQUARE
   10 method_decl: type IDENTIFIER . OPEN_PAREN CLOSE_PAREN block
   12            | type IDENTIFIER . OPEN_PAREN parameters CLOSE_PAREN block

    OPEN_SQUARE  shift, and go to state 19
    OPEN_PAREN   shift, and go to state 20

    $default  reduce using rule 8 (field)


State 16

    5 field_decl: type many_field . SEMI_COLON
    7 many_field: many_field . COMMA field

    SEMI_COLON  shift, and go to state 21
    COMMA       shift, and go to state 22


State 17

    6 many_field: field .

    $default  reduce using rule 6 (many_field)


State 18

   11 method_decl: VOID IDENTIFIER OPEN_PAREN . CLOSE_PAREN block
   13            | VOID IDENTIFIER OPEN_PAREN . parameters CLOSE_PAREN block

    INT          shift, and go to state 7
    BOOLEAN      shift, and go to state 8
    CLOSE_PAREN  shift, and go to state 23

    parameters  go to state 24
    type        go to state 25


State 19

    9 field: IDENTIFIER OPEN_SQUARE . DECIMAL_LITERAL CLOSE_SQUARE

    DECIMAL_LITERAL  shift, and go to state 26


State 20

   10 method_decl: type IDENTIFIER OPEN_PAREN . CLOSE_PAREN block
   12            | type IDENTIFIER OPEN_PAREN . parameters CLOSE_PAREN block

    INT          shift, and go to state 7
    BOOLEAN      shift, and go to state 8
    CLOSE_PAREN  shift, and go to state 27

    parameters  go to state 28
    type        go to state 25


State 21

    5 field_decl: type many_field SEMI_COLON .

    $default  reduce using rule 5 (field_decl)


State 22

    7 many_field: many_field COMMA . field

    IDENTIFIER  shift, and go to state 29

    field  go to state 30


State 23

   11 method_decl: VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN . block

    OPEN_CURLY  shift, and go to state 31

    block  go to state 32


State 24

   13 method_decl: VOID IDENTIFIER OPEN_PAREN parameters . CLOSE_PAREN block

    CLOSE_PAREN  shift, and go to state 33


State 25

   14 parameters: type . IDENTIFIER
   15           | type . IDENTIFIER COMMA parameters

    IDENTIFIER  shift, and go to state 34


State 26

    9 field: IDENTIFIER OPEN_SQUARE DECIMAL_LITERAL . CLOSE_SQUARE

    CLOSE_SQUARE  shift, and go to state 35


State 27

   10 method_decl: type IDENTIFIER OPEN_PAREN CLOSE_PAREN . block

    OPEN_CURLY  shift, and go to state 31

    block  go to state 36


State 28

   12 method_decl: type IDENTIFIER OPEN_PAREN parameters . CLOSE_PAREN block

    CLOSE_PAREN  shift, and go to state 37


State 29

    8 field: IDENTIFIER .
    9      | IDENTIFIER . OPEN_SQUARE DECIMAL_LITERAL CLOSE_SQUARE

    OPEN_SQUARE  shift, and go to state 19

    $default  reduce using rule 8 (field)


State 30

    7 many_field: many_field COMMA field .

    $default  reduce using rule 7 (many_field)


State 31

   16 block: OPEN_CURLY . var_decls statements CLOSE_CURLY

    $default  reduce using rule 18 (var_decls)

    var_decls  go to state 38


State 32

   11 method_decl: VOID IDENTIFIER OPEN_PAREN CLOSE_PAREN block .

    $default  reduce using rule 11 (method_decl)


State 33

   13 method_decl: VOID IDENTIFIER OPEN_PAREN parameters CLOSE_PAREN . block

    OPEN_CURLY  shift, and go to state 31

    block  go to state 39


State 34

   14 parameters: type IDENTIFIER .
   15           | type IDENTIFIER . COMMA parameters

    COMMA  shift, and go to state 40

    $default  reduce using rule 14 (parameters)


State 35

    9 field: IDENTIFIER OPEN_SQUARE DECIMAL_LITERAL CLOSE_SQUARE .

    $default  reduce using rule 9 (field)


State 36

   10 method_decl: type IDENTIFIER OPEN_PAREN CLOSE_PAREN block .

    $default  reduce using rule 10 (method_decl)


State 37

   12 method_decl: type IDENTIFIER OPEN_PAREN parameters CLOSE_PAREN . block

    OPEN_CURLY  shift, and go to state 31

    block  go to state 41


State 38

   16 block: OPEN_CURLY var_decls . statements CLOSE_CURLY
   17 var_decls: var_decls . var_decl

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 26 (statements)

    var_decl    go to state 42
    type        go to state 43
    statements  go to state 44


State 39

   13 method_decl: VOID IDENTIFIER OPEN_PAREN parameters CLOSE_PAREN block .

    $default  reduce using rule 13 (method_decl)


State 40

   15 parameters: type IDENTIFIER COMMA . parameters

    INT      shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    parameters  go to state 45
    type        go to state 25


State 41

   12 method_decl: type IDENTIFIER OPEN_PAREN parameters CLOSE_PAREN block .

    $default  reduce using rule 12 (method_decl)


State 42

   17 var_decls: var_decls var_decl .

    $default  reduce using rule 17 (var_decls)


State 43

   19 var_decl: type . many_var SEMI_COLON

    IDENTIFIER  shift, and go to state 46

    many_var  go to state 47
    var       go to state 48


State 44

   16 block: OPEN_CURLY var_decls statements . CLOSE_CURLY
   25 statements: statements . statement

    IF           shift, and go to state 49
    FOR          shift, and go to state 50
    RETURN       shift, and go to state 51
    BREAK        shift, and go to state 52
    CONTINUE     shift, and go to state 53
    CALLOUT      shift, and go to state 54
    OPEN_CURLY   shift, and go to state 31
    CLOSE_CURLY  shift, and go to state 55
    IDENTIFIER   shift, and go to state 56

    block        go to state 57
    statement    go to state 58
    method_call  go to state 59
    location     go to state 60


State 45

   15 parameters: type IDENTIFIER COMMA parameters .

    $default  reduce using rule 15 (parameters)


State 46

   22 var: IDENTIFIER .

    $default  reduce using rule 22 (var)


State 47

   19 var_decl: type many_var . SEMI_COLON
   21 many_var: many_var . COMMA var

    SEMI_COLON  shift, and go to state 61
    COMMA       shift, and go to state 62


State 48

   20 many_var: var .

    $default  reduce using rule 20 (many_var)


State 49

   29 statement: IF . OPEN_PAREN expr CLOSE_PAREN block ELSE block
   30          | IF . OPEN_PAREN expr CLOSE_PAREN block

    OPEN_PAREN  shift, and go to state 63


State 50

   31 statement: FOR . IDENTIFIER EQUAL expr COMMA expr block

    IDENTIFIER  shift, and go to state 64


State 51

   32 statement: RETURN . expr SEMI_COLON
   33          | RETURN . SEMI_COLON

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    SEMI_COLON       shift, and go to state 69
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 76
    bool_literal  go to state 77


State 52

   34 statement: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 78


State 53

   35 statement: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 79


State 54

   42 method_call: CALLOUT . OPEN_PAREN STRING_LITERAL many_callout_arg CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 80


State 55

   16 block: OPEN_CURLY var_decls statements CLOSE_CURLY .

    $default  reduce using rule 16 (block)


State 56

   40 method_call: IDENTIFIER . OPEN_PAREN CLOSE_PAREN
   41            | IDENTIFIER . OPEN_PAREN many_expr CLOSE_PAREN
   49 location: IDENTIFIER .
   50         | IDENTIFIER . OPEN_SQUARE CLOSE_SQUARE
   51         | IDENTIFIER . OPEN_SQUARE expr CLOSE_SQUARE

    OPEN_SQUARE  shift, and go to state 81
    OPEN_PAREN   shift, and go to state 82

    $default  reduce using rule 49 (location)


State 57

   36 statement: block .

    $default  reduce using rule 36 (statement)


State 58

   25 statements: statements statement .

    $default  reduce using rule 25 (statements)


State 59

   28 statement: method_call . SEMI_COLON

    SEMI_COLON  shift, and go to state 83


State 60

   27 statement: location . assign_op expr SEMI_COLON

    EQUAL        shift, and go to state 84
    MINUS_EQUAL  shift, and go to state 85
    PLUS_EQUAL   shift, and go to state 86

    assign_op  go to state 87


State 61

   19 var_decl: type many_var SEMI_COLON .

    $default  reduce using rule 19 (var_decl)


State 62

   21 many_var: many_var COMMA . var

    IDENTIFIER  shift, and go to state 46

    var  go to state 88


State 63

   29 statement: IF OPEN_PAREN . expr CLOSE_PAREN block ELSE block
   30          | IF OPEN_PAREN . expr CLOSE_PAREN block

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 89
    bool_literal  go to state 77


State 64

   31 statement: FOR IDENTIFIER . EQUAL expr COMMA expr block

    EQUAL  shift, and go to state 90


State 65

   74 bool_literal: TRUE .

    $default  reduce using rule 74 (bool_literal)


State 66

   75 bool_literal: FALSE .

    $default  reduce using rule 75 (bool_literal)


State 67

   58 expr: MINUS . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 91
    bool_literal  go to state 77


State 68

   60 expr: OPEN_PAREN . expr CLOSE_PAREN

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 92
    bool_literal  go to state 77


State 69

   33 statement: RETURN SEMI_COLON .

    $default  reduce using rule 33 (statement)


State 70

   59 expr: EXCLAMATION . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 93
    bool_literal  go to state 77


State 71

   55 expr: HEX_LITERAL .

    $default  reduce using rule 55 (expr)


State 72

   54 expr: DECIMAL_LITERAL .

    $default  reduce using rule 54 (expr)


State 73

   56 expr: CHAR_LITERAL .

    $default  reduce using rule 56 (expr)


State 74

   53 expr: method_call .

    $default  reduce using rule 53 (expr)


State 75

   52 expr: location .

    $default  reduce using rule 52 (expr)


State 76

   32 statement: RETURN expr . SEMI_COLON
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106
    SEMI_COLON          shift, and go to state 107


State 77

   57 expr: bool_literal .

    $default  reduce using rule 57 (expr)


State 78

   34 statement: BREAK SEMI_COLON .

    $default  reduce using rule 34 (statement)


State 79

   35 statement: CONTINUE SEMI_COLON .

    $default  reduce using rule 35 (statement)


State 80

   42 method_call: CALLOUT OPEN_PAREN . STRING_LITERAL many_callout_arg CLOSE_PAREN

    STRING_LITERAL  shift, and go to state 108


State 81

   50 location: IDENTIFIER OPEN_SQUARE . CLOSE_SQUARE
   51         | IDENTIFIER OPEN_SQUARE . expr CLOSE_SQUARE

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    CLOSE_SQUARE     shift, and go to state 109
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 110
    bool_literal  go to state 77


State 82

   40 method_call: IDENTIFIER OPEN_PAREN . CLOSE_PAREN
   41            | IDENTIFIER OPEN_PAREN . many_expr CLOSE_PAREN

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    CLOSE_PAREN      shift, and go to state 111
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    many_expr     go to state 112
    location      go to state 75
    expr          go to state 113
    bool_literal  go to state 77


State 83

   28 statement: method_call SEMI_COLON .

    $default  reduce using rule 28 (statement)


State 84

   37 assign_op: EQUAL .

    $default  reduce using rule 37 (assign_op)


State 85

   39 assign_op: MINUS_EQUAL .

    $default  reduce using rule 39 (assign_op)


State 86

   38 assign_op: PLUS_EQUAL .

    $default  reduce using rule 38 (assign_op)


State 87

   27 statement: location assign_op . expr SEMI_COLON

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 114
    bool_literal  go to state 77


State 88

   21 many_var: many_var COMMA var .

    $default  reduce using rule 21 (many_var)


State 89

   29 statement: IF OPEN_PAREN expr . CLOSE_PAREN block ELSE block
   30          | IF OPEN_PAREN expr . CLOSE_PAREN block
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106
    CLOSE_PAREN         shift, and go to state 115


State 90

   31 statement: FOR IDENTIFIER EQUAL . expr COMMA expr block

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 116
    bool_literal  go to state 77


State 91

   58 expr: MINUS expr .
   61     | expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    MULTIPLY  shift, and go to state 96
    DIVIDE    shift, and go to state 97
    MOD       shift, and go to state 98

    $default  reduce using rule 58 (expr)


State 92

   60 expr: OPEN_PAREN expr . CLOSE_PAREN
   61     | expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106
    CLOSE_PAREN         shift, and go to state 117


State 93

   59 expr: EXCLAMATION expr .
   61     | expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    $default  reduce using rule 59 (expr)


State 94

   61 expr: expr PLUS . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 118
    bool_literal  go to state 77


State 95

   62 expr: expr MINUS . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 119
    bool_literal  go to state 77


State 96

   63 expr: expr MULTIPLY . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 120
    bool_literal  go to state 77


State 97

   64 expr: expr DIVIDE . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 121
    bool_literal  go to state 77


State 98

   65 expr: expr MOD . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 122
    bool_literal  go to state 77


State 99

   67 expr: expr LESS_THAN . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 123
    bool_literal  go to state 77


State 100

   69 expr: expr LESS_THAN_EQUAL . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 124
    bool_literal  go to state 77


State 101

   66 expr: expr GREATER_THAN . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 125
    bool_literal  go to state 77


State 102

   68 expr: expr GREATER_THAN_EQUAL . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 126
    bool_literal  go to state 77


State 103

   73 expr: expr EQUAL_EQUAL . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 127
    bool_literal  go to state 77


State 104

   72 expr: expr NOT_EQUAL . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 128
    bool_literal  go to state 77


State 105

   70 expr: expr AND . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 129
    bool_literal  go to state 77


State 106

   71 expr: expr OR . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 130
    bool_literal  go to state 77


State 107

   32 statement: RETURN expr SEMI_COLON .

    $default  reduce using rule 32 (statement)


State 108

   42 method_call: CALLOUT OPEN_PAREN STRING_LITERAL . many_callout_arg CLOSE_PAREN

    $default  reduce using rule 43 (many_callout_arg)

    many_callout_arg  go to state 131


State 109

   50 location: IDENTIFIER OPEN_SQUARE CLOSE_SQUARE .

    $default  reduce using rule 50 (location)


State 110

   51 location: IDENTIFIER OPEN_SQUARE expr . CLOSE_SQUARE
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106
    CLOSE_SQUARE        shift, and go to state 132


State 111

   40 method_call: IDENTIFIER OPEN_PAREN CLOSE_PAREN .

    $default  reduce using rule 40 (method_call)


State 112

   41 method_call: IDENTIFIER OPEN_PAREN many_expr . CLOSE_PAREN
   48 many_expr: many_expr . COMMA expr

    CLOSE_PAREN  shift, and go to state 133
    COMMA        shift, and go to state 134


State 113

   47 many_expr: expr .
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106

    $default  reduce using rule 47 (many_expr)


State 114

   27 statement: location assign_op expr . SEMI_COLON
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106
    SEMI_COLON          shift, and go to state 135


State 115

   29 statement: IF OPEN_PAREN expr CLOSE_PAREN . block ELSE block
   30          | IF OPEN_PAREN expr CLOSE_PAREN . block

    OPEN_CURLY  shift, and go to state 31

    block  go to state 136


State 116

   31 statement: FOR IDENTIFIER EQUAL expr . COMMA expr block
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106
    COMMA               shift, and go to state 137


State 117

   60 expr: OPEN_PAREN expr CLOSE_PAREN .

    $default  reduce using rule 60 (expr)


State 118

   61 expr: expr . PLUS expr
   61     | expr PLUS expr .
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    MULTIPLY  shift, and go to state 96
    DIVIDE    shift, and go to state 97
    MOD       shift, and go to state 98

    $default  reduce using rule 61 (expr)


State 119

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   62     | expr MINUS expr .
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    MULTIPLY  shift, and go to state 96
    DIVIDE    shift, and go to state 97
    MOD       shift, and go to state 98

    $default  reduce using rule 62 (expr)


State 120

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   63     | expr MULTIPLY expr .
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    $default  reduce using rule 63 (expr)


State 121

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   64     | expr DIVIDE expr .
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    $default  reduce using rule 64 (expr)


State 122

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   65     | expr MOD expr .
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    $default  reduce using rule 65 (expr)


State 123

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   67     | expr LESS_THAN expr .
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS      shift, and go to state 94
    MINUS     shift, and go to state 95
    MULTIPLY  shift, and go to state 96
    DIVIDE    shift, and go to state 97
    MOD       shift, and go to state 98

    LESS_THAN           error (nonassociative)
    LESS_THAN_EQUAL     error (nonassociative)
    GREATER_THAN        error (nonassociative)
    GREATER_THAN_EQUAL  error (nonassociative)

    $default  reduce using rule 67 (expr)


State 124

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   69     | expr LESS_THAN_EQUAL expr .
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS      shift, and go to state 94
    MINUS     shift, and go to state 95
    MULTIPLY  shift, and go to state 96
    DIVIDE    shift, and go to state 97
    MOD       shift, and go to state 98

    LESS_THAN           error (nonassociative)
    LESS_THAN_EQUAL     error (nonassociative)
    GREATER_THAN        error (nonassociative)
    GREATER_THAN_EQUAL  error (nonassociative)

    $default  reduce using rule 69 (expr)


State 125

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   66     | expr GREATER_THAN expr .
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS      shift, and go to state 94
    MINUS     shift, and go to state 95
    MULTIPLY  shift, and go to state 96
    DIVIDE    shift, and go to state 97
    MOD       shift, and go to state 98

    LESS_THAN           error (nonassociative)
    LESS_THAN_EQUAL     error (nonassociative)
    GREATER_THAN        error (nonassociative)
    GREATER_THAN_EQUAL  error (nonassociative)

    $default  reduce using rule 66 (expr)


State 126

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   68     | expr GREATER_THAN_EQUAL expr .
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS      shift, and go to state 94
    MINUS     shift, and go to state 95
    MULTIPLY  shift, and go to state 96
    DIVIDE    shift, and go to state 97
    MOD       shift, and go to state 98

    LESS_THAN           error (nonassociative)
    LESS_THAN_EQUAL     error (nonassociative)
    GREATER_THAN        error (nonassociative)
    GREATER_THAN_EQUAL  error (nonassociative)

    $default  reduce using rule 68 (expr)


State 127

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr
   73     | expr EQUAL_EQUAL expr .

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102

    $default  reduce using rule 73 (expr)


State 128

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   72     | expr NOT_EQUAL expr .
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102

    $default  reduce using rule 72 (expr)


State 129

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   70     | expr AND expr .
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104

    $default  reduce using rule 70 (expr)


State 130

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   71     | expr OR expr .
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105

    $default  reduce using rule 71 (expr)


State 131

   42 method_call: CALLOUT OPEN_PAREN STRING_LITERAL many_callout_arg . CLOSE_PAREN
   44 many_callout_arg: many_callout_arg . COMMA callout_arg

    CLOSE_PAREN  shift, and go to state 138
    COMMA        shift, and go to state 139


State 132

   51 location: IDENTIFIER OPEN_SQUARE expr CLOSE_SQUARE .

    $default  reduce using rule 51 (location)


State 133

   41 method_call: IDENTIFIER OPEN_PAREN many_expr CLOSE_PAREN .

    $default  reduce using rule 41 (method_call)


State 134

   48 many_expr: many_expr COMMA . expr

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 140
    bool_literal  go to state 77


State 135

   27 statement: location assign_op expr SEMI_COLON .

    $default  reduce using rule 27 (statement)


State 136

   29 statement: IF OPEN_PAREN expr CLOSE_PAREN block . ELSE block
   30          | IF OPEN_PAREN expr CLOSE_PAREN block .

    ELSE  shift, and go to state 141

    $default  reduce using rule 30 (statement)


State 137

   31 statement: FOR IDENTIFIER EQUAL expr COMMA . expr block

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    location      go to state 75
    expr          go to state 142
    bool_literal  go to state 77


State 138

   42 method_call: CALLOUT OPEN_PAREN STRING_LITERAL many_callout_arg CLOSE_PAREN .

    $default  reduce using rule 42 (method_call)


State 139

   44 many_callout_arg: many_callout_arg COMMA . callout_arg

    CALLOUT          shift, and go to state 54
    TRUE             shift, and go to state 65
    FALSE            shift, and go to state 66
    MINUS            shift, and go to state 67
    OPEN_PAREN       shift, and go to state 68
    IDENTIFIER       shift, and go to state 56
    EXCLAMATION      shift, and go to state 70
    HEX_LITERAL      shift, and go to state 71
    DECIMAL_LITERAL  shift, and go to state 72
    STRING_LITERAL   shift, and go to state 143
    CHAR_LITERAL     shift, and go to state 73

    method_call   go to state 74
    callout_arg   go to state 144
    location      go to state 75
    expr          go to state 145
    bool_literal  go to state 77


State 140

   48 many_expr: many_expr COMMA expr .
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106

    $default  reduce using rule 48 (many_expr)


State 141

   29 statement: IF OPEN_PAREN expr CLOSE_PAREN block ELSE . block

    OPEN_CURLY  shift, and go to state 31

    block  go to state 146


State 142

   31 statement: FOR IDENTIFIER EQUAL expr COMMA expr . block
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106
    OPEN_CURLY          shift, and go to state 31

    block  go to state 147


State 143

   46 callout_arg: STRING_LITERAL .

    $default  reduce using rule 46 (callout_arg)


State 144

   44 many_callout_arg: many_callout_arg COMMA callout_arg .

    $default  reduce using rule 44 (many_callout_arg)


State 145

   45 callout_arg: expr .
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MULTIPLY expr
   64     | expr . DIVIDE expr
   65     | expr . MOD expr
   66     | expr . GREATER_THAN expr
   67     | expr . LESS_THAN expr
   68     | expr . GREATER_THAN_EQUAL expr
   69     | expr . LESS_THAN_EQUAL expr
   70     | expr . AND expr
   71     | expr . OR expr
   72     | expr . NOT_EQUAL expr
   73     | expr . EQUAL_EQUAL expr

    PLUS                shift, and go to state 94
    MINUS               shift, and go to state 95
    MULTIPLY            shift, and go to state 96
    DIVIDE              shift, and go to state 97
    MOD                 shift, and go to state 98
    LESS_THAN           shift, and go to state 99
    LESS_THAN_EQUAL     shift, and go to state 100
    GREATER_THAN        shift, and go to state 101
    GREATER_THAN_EQUAL  shift, and go to state 102
    EQUAL_EQUAL         shift, and go to state 103
    NOT_EQUAL           shift, and go to state 104
    AND                 shift, and go to state 105
    OR                  shift, and go to state 106

    $default  reduce using rule 45 (callout_arg)


State 146

   29 statement: IF OPEN_PAREN expr CLOSE_PAREN block ELSE block .

    $default  reduce using rule 29 (statement)


State 147

   31 statement: FOR IDENTIFIER EQUAL expr COMMA expr block .

    $default  reduce using rule 31 (statement)
